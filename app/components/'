import Ember      from  'ember';
//import stave_Beat from  './functions/stave_beat';
import beat_graphics from  './functions/beat_graphics';
import Stave      from  './instances/stave';
/*temp*/

export default Ember.Component.extend(Stave,{
  tagName:'canvas',
  attributeBindings:['height','width'],
  width:640,

  didInsertElement(){

    let ctx = this.get('element').getContext('2d');
    
    this.set('ctx',ctx);
    console.log(ctx, 'clef pane ctx')

     Ember.run(this,'clef',5) 
  //   Ember.run(this,'renderNotes') 
     Ember.run(this,'rememberNotes') 
//		 rest_Note.call(this,[1,1])

  },
  clef(bars){
    let ctx = this.get('ctx'),
        offset = 40;
        while(bars--){
          ctx.fillRect(0,bars*10 + offset,640,2)
        }
  },
  measureBar(index){
    let offset = index* this.get('measure_width'),
        yoffset = 40;

   // console.log(index,'index measureBar',offset, this.get('measure_width'))
    this.get('ctx').fillRect(offset,yoffset,2,42)
  },

	drawBar(index){
		let barArray = this.get('barArray'),
				arrayLength = barArray.length,
				tempLength	=	arrayLength,
				measureOffset=	index*240;
				
		
		if(arrayLength){

			//determine direction
			let slope = 0;

			while(--tempLength > 0){
				let diffSlope = barArray[tempLength].y - barArray[tempLength-1].y;
				console.log('bar', diffSlope)
				if(diffSlope <= 0){
					slope++
				}else{
					slope--
				}
			}
			console.log('bar slope',slope)

							/*
			if(slope < 0){
				barArray.sort((a,b)=>b)
			}
*/
			let boundsX = barArray.map(a=>a.x),
					boundsY = barArray.map(a=>a.y),
					highY		=	Math.max.apply(Math,boundsY),
					lowY		=	Math.min.apply(Math,boundsY),
					highX	=	Math.max.apply(Math,boundsX),
					lowX =	Math.min.apply(Math,boundsX),
					ctx =	this.get('ctx');

			ctx.beginPath()
			if(slope < 0 ){
				ctx.moveTo(10+lowX*20+measureOffset,60+highY)
				ctx.lineTo(10+highX*20+measureOffset,60+lowY)
			}else{
				ctx.moveTo(10+lowX*20+measureOffset,60+lowY)
				ctx.lineTo(10+highX*20+measureOffset,60+highY)
			}
			ctx.lineWidth=5
			ctx.stroke()
		}
	},

	barArray:[],

	rememberNotes(){

	  let notes = this.get('noteMatrix');
    console.log(notes , 'noteMatrix ala stave-pane')

    notes.forEach(function(beatsAsObject,index){

      this.set('measureIndex',index)
			this.set('barArray',[])
      Ember.run(this,'measureBar',index)
			let debug = Object.keys(beatsAsObject).map(a=>{
							let b = beatsAsObject[a][0];
							return `${b.note},${b.o}`
			});
			console.log(debug,'beatsAsObject')

			Object.keys(beatsAsObject).forEach((beats,beat) => { 
				let beatKey = beatsAsObject[beats];
				console.log(beats,beatKey,'beats')
				if(beatKey.length){
					console.log('beats it is')
					beat_graphics.apply(this,[beatKey,beat])
				}else{

					let restLength = beats;
					
					while(!beatsAsObject[++restLength].length){
						beatsAsObject[restLength] = {rest:true}
					}
					restLength-=beats
					beatsAsObject[beats] = {rest:restLength}
					console.log('rest of beats',restLength)
					beat_graphics.apply(this,[beatsAsObject[beats],beat])
					
				}
			},this)
      //measure.forEach(String,this)
			Ember.run(this,'drawBar',index)
    },this)

//    notes.forEach(measureString,this)
	},
  /*
  renderNotes(){
    let notes = this.get('noteMatrix');
    console.log(notes , 'noteMatrix ala stave-pane')

    notes.forEach(function(measure,index){
      this.set('measureIndex',index)
      Ember.run(this,'measureBar',index)
      measure.forEach(String,this)
    },this)
//    notes.forEach(measureString,this)

  },


*/

});


/* NOTES
 
   string = 6
   forEach string => fret
    fret += interval[stringIndex]
    note = [fret%12,octave,(beat)]
  
    every note is measure becomes flattened to [2]

     
 */
